09-jQuery高级 Day09 03.19

02-知识点预习
03-鼠标事件补充

	        // 鼠标进入元素  进入子元素时不会重复触发
			/*   $box.mouseenter(function () {
                $box.animate({'margin-top':100});
            })

            // 鼠标离开元素
            $box.mouseleave(function () {
                $box.animate({'margin-top':50});
            }) */


            // hover事件相当于 mouseenter和mouseleave结合体   ***
            // 可以给它传两个回调函数 第一个回调是进入  第一个回调是离开
            $box.hover(function () { 
                $box.animate({'margin-top':100});
            },function () {
                $box.animate({'margin-top':50});
            })
			
			
			mouseenter  和 mouseleave 没有事件冒泡

04-阻止表单默认提交行为
 
	1. input:submit : 提交按钮.   ***
	
		点击提交按钮之后,会提交表单数据.
						 真正的是调用表单的submit().
						 
		表单数据到底是否真正提交. 依据submit()函数的返回值.
		
				如果返回true,提交  (默认是true)
				
				如果返回false,不提交.
				
	2. 阻止默认的表单提交行为  
	
		在submit()事件中return false;
		
	3. 代码:
	
		$(function () {
            $('.form').submit(function (event) {
                
                alert('提交数据了');
                // 阻止表单默认提交的行为
                return false;

                // 阻止表单默认提交行为
                // event.preventDefault();

            })
        })

05-鼠标和表单事件小结
06-事件冒泡的概念

	1. js的事件
	
		三个阶段: ***
		
			1. 捕获阶段 :  父 --- 子(目标)  (从外,向里查找, 找目标)
			
			2. 目标阶段 :  找到了目标  (目标: 触发事件的元素)  (如果目标元素绑定了事件处理程序click(function(){}),执行事件处理程序)
			
			3. 冒泡阶段 :  子(目标) -- 父  (由目标元素,往外传递)   (在冒泡的过程中,如果某个父亲元素,绑定了事件处理程序,也执行)  
			
	2. 如果阻止事件冒泡
	
		1. return false
		
		2. event.stopPropagation();  阻止传播
		
	3. return false;    ***
	
		1. 阻止默认行为: 阻止表单提交
		
		2. 阻止事件冒泡


07-事件冒泡验证
08-弹框案例
09-事件冒泡小结

	1. 是么时候使用事件冒泡:   事件委托
	
	2. 什么时候屏蔽事件冒泡:   父子都有点击事件,而且处理的事件逻辑不一样.  


10-事件委托概念 
	1. 事件委托: 儿子委托父亲做事情. 
	2. 代理函数:  delegate()
	
		代理:  父亲代理了儿子事情
		
		语法:
		
			// 参数1:要代理的那个儿子
            // 参数2:事件
            // 参数3:回调函数
            $('.list').delegate('li','click',function () {  ***
                // 在事件委托中 this表示 触发事件的子级
                $(this).css({'color':'red'});
            })
			
			
			
			儿子自己做事情:  内部是绑定了多次点击事件
			
			$('.list li').click(function () {
                $(this).css({'color':'red'});
            }) 
			
	3. 事件委托的优点:
	
		1. 减少事件绑定次数
		2. 对未来儿子也生效
		


11-节点操作  ***

	1. 新建节点
	
		var $div2 = $('<p>我是新创建的</p>');  
		
		$('标签字符串'): 创建节点/标签对象
	
	2. 节点添加(移动)
			一个节点只有一份,后面的函数会覆盖前面的.
			1.让你去上海,你就要从郑州离开,去上海
			2.再让你去北京,你就要离开上海,去北京.
	
		    // 1..在box内部添加 (添加子节点)
				// 	1在box里面的最后添加一个标签
				// $box.append($div2);    // 追加

				// 2在box里面的最前添加一个标签
				// $box.prepend($div2); 
			
			
            // 2.外部添加  (添加兄弟节点)
				// 在box的外部的前面添加一个标签
				// $box.before($div2); 

				// 在box的外部的后面添加一个标签
				// $box.after($div2); 

    3. 节点删除

		// remove()删除节点 删除标签
		// $div2.remove();
	
12-todolist

	1. 点击增加按钮
	2. 如果为空提示用户,并且返回
	3. 如果不为空,获取文本框内容,添加到ul子级最后

13-委托及节点小结
14-todolist案例02

	1. jq的选择器,一般情况下,是将获取到的元素对象,放到一个数组. (即使只有一个对象,也会放到数组中)
	
		所以才可以通过jq对象调用length属性 : $div.length   (数组才有长度属性)

15-正则复习  ***

	1、test 
	用法：正则.test(字符串) 匹配成功，就返回真，否则就返回假

	2、replace
	用法：字符串.replace(正则，新的字符串) 匹配成功的字符去替换新的字符

16-用户名正则验证


17-表单验证案例

	5.单选框/复选框是否勾选的判断

		js写法:单选框标签对象.checked == true
		jQuery写法:单选框标签对象.is(:checked) == true















