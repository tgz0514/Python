06-JavaScript高级 Day06 02.44

第五天作业:

1. 思路:

	1. 获取相应的标签
	
		获取颜色div,body.
		
	2. 操作标签
	
		点击颜色div,让body转换为对应的颜色.
2.思路

	1. 获取相应标签
	
		操作哪些标签,就需要获取哪些标签
		
		1. 样式的标签
		2. 设置按钮
		3. 右侧div
		
	2. 操作标签
	
		先修改样式,再点击设置按钮.最后修改右侧div的样式
		
		1. 给设置按钮添加onclick事件
		2. 点击事件内 :  获取修改后的样式
		
		3. 点击事件内:   修改右侧div的样式
		
		
		
3. 思路

	1. 获取相应标签
	
		发送按钮
		内容文本框
		select选择
		
		内容的div
	2.操作标签
	
		用户选择A/B,输入内容,点击发送.最终显示
		
		1. 点击事件
		
			获取A/B
			获取内容
			显示
		 

02-知识点预习 
03-js中数组的定义

	// 1.实例化对象 (new:创建)
	var aOneArray = new Array(1,2,3,"a","b");
		
	//2.快捷创建  ***
	var aTwoArray = [1,2,3,"d","f"];   (注意: js是弱类型语言.允许数组中的元素的数据类型不一致. 但是一般我们定义的时候,都是一致的)
	   
	//3.多维数组  (数组中的元素/项,还是一个数组)
	var aThreeArray = [[1,2,3],["a","b","c"]];
	
	数组变量:存储多个数据
	普通变量:存储一个数据



04-js中数组的常用方法
	0.定义一个数组
       var aList01 = [1, 2, 3, 4, 5];

    1. length用来获取数组的长度,元素个数  (length属性)   ***
        console.log(aList01.length);
 
    2. push在数组最后面添加新的元素  (数组的元素:数组中某一项)   (push推, p:屁股)
       aList01.push(6);

       push()里面如果传多个参数表示一次给数组添加多个元素
       aList01.push(6,7); 
		
    3. pop() 删除数组中最后一个元素,一次只能删除最后面的一个    (pop:爆炸,p:腚)
       aList01.pop();

    4.获取数组中指定角标/下标/索引的元素  ****
       var iNum = aList01[4];


    5.修改数组中指定角标的元素  ****
       aList01[0] = '1';
		
05-js中数组的常用方法02

	6. splice : 删除/替换/添加  (有点难)   (splice:胶接)
		// 第一个参数: start 表示要删除的元素起始角标,包含起始角标
        // 第二个参数: deleteCount 表示要删除的元素个数
        // 第三个及以后的参数: newElement 是要添加的新元素,添加在第一个参数的角标位置起,占有起始角标
		
		
			var aList01 = [1, 2, 3, 4, 5]; 
		1. 删除 
			 aList01.splice(0,2);
		
		2. 替换 
			aList01.splice(0, 2, '1', '2');
		
		3. 添加 
			aList01.splice(0, 0, '1', '2');
	
		
	7. reverse :  反转 :把数组中的每一个元素颠倒/倒置/反转  ***
         aList01.reverse();
	 
	8. join : 拼接 : 把数组中的元素  ,以某个字符 进行拼接 变成字符串   ***
		var aList01 = [1, 2, 3, 4, 5];
		var sStr = aList01.join();   // 1,2,3,4,5 (默认按照数组的逗号拼接)
		var sStr = aList01.join('');  //123456
		 var sStr = aList01.join('-'); //1-2-3-4-5-6
		 
		 注意:
		 
			数组与字符串 , 相互转换.   (此逻辑,开发中用的比较多)
	
	9. indexOf : 谁的索引  : 如果找到了,就是对应索引(只找第一个).  如果没有找到,就是-1;  ***
	
		// 9.indexOf()返回元素在数组中第一次出现的角标
        // 如果返回-1说明数组中没有些元素
        var aList02 = ['1', '2', '1'];
		
		 console.log(aList02.indexOf('z'));
		 
		 注意:
		 
			判断某个元素是否在数组中.
			
				如果等于-1,说明不存在   ==-1
				如果不等于-1,说明存在	!=-1

06-js中数组的常用方法小结
07-js中的循环语句

	1. while循环

	   var iNum01 = 0; 
		while (iNum01 < 5) { 
			iNum01++; 
			console.log(iNum01);
		}
	
	2. for循环  ***
	
		for (var i = 0; i < 5; i++) {
			console.log('哈哈' + i);
		}
		
		执行流程:  ***
		
			1. 初始化表达式 : var i = 0;  (只执行一次)
			
			2. 条件表达式 : i < 5
			
			3. 循环体:  console.log('哈哈' + i);
			
			4. 叠加/递减表达式 :  i++
			
			
			1234 234 234
			
			
		另外的一种写法:
			var i = 0;
			for ( ; i < 5;  ) {   // 这里的;不能省去 
			
				console.log('哈哈' + i);
				i++;
			}
			
			
			 var iNum01 = 0; 
			while (iNum01 < 5) { 
				iNum01++; 
				console.log(iNum01);
			}
			
		
	3. 区别
	
		所有python中的条件不带小括号(). js中的条件都放在()中
		
			if条件
			while条件
			for条件
		

08-js数组去重

	//1. 取出数组中的每一项 
	//2. 判断当前项是否在新数组中,如果没有,就放入 
	for (var i = 0; i < aList01.length; i++) {
		//1. 取出数组中的每一项 
		var sItem = aList01[i];
		//2. 判断当前项是否在新数组中,如果没有,就放入 
		if(aNewList.indexOf(sItem) == -1 ){
			aNewList.push(sItem);
		} 
	}

09-js列表加载数组数据

	1. 定义数组
	
	2. 循环遍历数组
	
		拼接  列表 字符串
		
		str += "<li>"+arr[i]+"</li>"
		
	3. 将拼接的字符串,添加到界面ul上

		ul.innerHTML = str;
	
10-数组及循环小结
11-js中字符串常用方法

	1. 类型转换  (字符串转换数值)  ***
		parseInt转换为整型  (integer)
		parseFloat浮点型 
		
			浮点型: 某些情况下,浮点数做运算时丢失精度.   0.1+0.2 !=0.3  
		
		- * / == 隐式转换 系统自动判断 并转换类型
		
			 15 == '15' 
			 
			 NaN 非数值类型  : not a number 
			 
				做字符串 转换为  数值 类型时,  如果是非数字的内容进行转换.   转换结果就是NaN
				
				123 - 'abc'

	2. 字符串的常用方法  ***
	
		1. + 可以进行字符串拼接 
			
			+  : 如果加号左右两侧,有一个字符串.  字符相连
			
				如果两侧都是数字,数字相加.

		2. subString():字符串截取
			参数: subString(start,end); 
				  [start,end)包含start,不包含end
				 
				如果只传入第一个参数,默认截取到最后 
	
		3.split() : 字符串拆分 :把字符串中的字符拆分成数组中的每一个元素
			
			split()如果什么也不传就是把字符串当成数组中的一个元素
			var sStr = "abc";
			sStr.split() ---- ["abc"]
			
			split('') 如果传空字符串就是把字符串中的每一个字符拆分成数组的一个一个的元素 
		
			var sStr03 = '2017-11-28';
			split('-') 如果传入指定字符 表示以此字符来拆分字符串,如果字符串中没有此字符,会把整个字符串当成数组的一个元素
			 
	
	
		4.indexOf() : 获取字符/字符串的索引 : 获取字符在字符串中第一次出现的角标或判断字符串中是否包含指定字符
			
			如果返回-1 表示字符串中没有此字符 
			 
			字符串: 字符数组.
			
					var sStr01 = 'abcdefab',     // sStr01[0] --- a
					
					sStr01.indexOf('ab')
					
					
		5.字符串与数组相互转换
		
			1.数组转换为字符串 : join
			2.字符串转换为数组 : split 
			

12-js中实现字符串倒置 ***

	 sStr = sStr.split('').reverse().join('');

13-js中的定时器实现

	1. setTimeout : 执行一次的定时器  (延时定时器)
	
		Timeout: 倒数,倒计时
		
		clearTimeout
	
	2. setInterval: 执行多次的定时器 (间隔定时器) ***
	
		interval : 间隔
		
	3. 语法:
	
		var oInterval = setInterval(函数,间隔时间);
		
			函数: 匿名函数/函数名
		
		清空定时器:clearInterval(oInterval);
		
		
		

14-js中实现左右无限移动的动画

15-js移动无缝滚动

	1. div 的宽度1000px 
	
		溢出隐藏: overflow:hidden
	
	2. ul 的宽度2000px
	
		让ul进行位移.  改变left值.
		
		如果ul的位置>0,变为-1000
		
		如果ul的位置<-1000,变为0.


16-js实现无缝滚动02

	1. 点击向左,向右箭头. 
	
		实现 ul,向左,向右位移.
		
	2. 鼠标移入,停止滚动.  清空定时器
	 
		鼠标离开,继续滚动 . 重新设置定时器
		
		鼠标移入事件: onmouseover
		
		鼠标离开事件: onmouseout
		
					  onclick
					  
					  onload

17-js中常用调试方式

	// 1.可以弹出变量的值,也可以阻塞代码的执行
	// alert(aList);

	// 2.浏览器的控制台输入 ,要输入字典或数组时尽量使用此方式 大批量用控制台输出
	// console.log(aList);  ***









